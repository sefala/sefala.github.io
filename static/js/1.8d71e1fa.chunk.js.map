{"version":3,"sources":["components/Spacer/Spacer.tsx","utils/erc20.ts","utils/formatBalance.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/callHelpers.ts","views/Farms/components/DepositModal.tsx","hooks/useBlock.ts","hooks/useApprove.ts","hooks/useStake.ts","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/ModalActions/ModalActions.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","getDisplayBalance","decimals","fractionDigits","number","getBalance","toFixed","getBalanceNumber","displayBalance","BigNumber","dividedBy","pow","toNumber","getBalanceBig","getFullDisplayBalance","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","TranslationsContext","length","buyBonds","amount","cashStat","target","getTreasury","PegType","SDO","amountBig","times","toString","priceBig","send","from","on","tx","transactionHash","redeemBonds","approve","ethers","constants","MaxUint256","stake","pid","deposit","restake","stakeReward","unstake","withdraw","harvest","unstakeBoardroom","stakeBoardroom","swapDollar","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","onSelectMax","onChange","symbol","variant","onClick","disabled","useBlock","BlockContext","useAllowance","isApproved","setIsApproved","useWallet","block","useEffect","then","x","isGreaterThan","useApproveBoardroom","type","useBoardroom","share","useToken","QuoteToken","SSO","onApprove","useApproveIfo","useIfo","useApproveTreasury","token","timelockContract","useTimelock","treasuryContract","useTreasury","useApprove","dispatch","useDispatch","useMasterchef","fetchFarmUserDataAsync","useStake","contractPid","onStake","useStakeToBoardroom","useSwapIfo","onSwap","useWithdrawFromBoardroom","onWithdraw","StyledInputWrapper","theme","colors","input","radii","default","StyledInput","primary","Input","endAdornment","startAdornment","rest","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","TranslateString","toLocaleString","placeholder","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i"],"mappings":"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","file":"static/js/1.8d71e1fa.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js'\n\nexport const getDisplayBalance = (balance: BigNumber, decimals = 18, fractionDigits = 3) => {\n  const number = getBalance(balance, decimals - fractionDigits);\n  return (number / 10 ** fractionDigits).toFixed(fractionDigits);\n};\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getBalanceBig = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance\n}\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport function getBalance(balance: BigNumber, decimals = 18) : number {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\n}\n\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\r\nimport { PegType } from 'config/constants/types'\r\nimport { ethers } from 'ethers'\r\nimport { getTreasury } from './addressHelpers'\r\n\r\nexport const buyBonds = async (contract, amount, cashStat, account) => {\r\n  const target = getTreasury(PegType.SDO)\r\n\r\n  const amountBig = new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()\r\n  const priceBig = new BigNumber(cashStat).times(new BigNumber(10).pow(18)).toString()\r\n  return contract.methods\r\n    .buyBonds(target, amountBig, priceBig)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const redeemBonds = async (contract, amount, cashStat, account) => {\r\n  const target = getTreasury(PegType.SDO)\r\n\r\n  const amountBig = new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()\r\n  const priceBig = new BigNumber(cashStat).times(new BigNumber(10).pow(18)).toString()\r\n  return contract.methods\r\n    .redeemBonds(target, amountBig, priceBig)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) =>\r\n  lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({ from: account })\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const restake = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .stakeReward(pid)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstakeBoardroom = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const stakeBoardroom = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .stake(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const swapDollar = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .swapDollar(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Deposit ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          Cancel\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? 'Pending Confirmation' : 'Confirm'}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useCallback, useState, useEffect, useMemo } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useDispatch } from 'react-redux'\nimport { FarmType, PegType, QuoteToken } from 'config/constants/types'\nimport { approve } from 'utils/callHelpers'\nimport BigNumber from 'bignumber.js'\nimport { getAllowance } from 'utils/erc20'\nimport { fetchFarmUserDataAsync } from '../state/farms'\nimport { useBoardroom, useIfo, useMasterchef, useTimelock, useToken, useTreasury } from './useContract'\nimport useBlock from './useBlock'\n\nconst useApprove = (type: FarmType, lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useAllowance = (lpContract: Contract, contract: Contract) => {\n  const [isApproved, setIsApproved] = useState(false)\n  const { account }: { account: string } = useWallet()\n  const block = useBlock()\n\n  useEffect(() => {\n    if (isApproved) return\n    getAllowance(lpContract, contract, account).then((x) => {\n      if (!account) return\n      const allowance = new BigNumber(x)\n      setIsApproved(allowance && allowance.isGreaterThan(0))\n    })\n  }, [account, contract, lpContract, block, isApproved])\n\n  return isApproved\n}\n\nexport const useApproveBoardroom = (type: PegType) => {\n  const { account }: { account: string } = useWallet()\n  const contract = useBoardroom(type)\n  const share = useToken(QuoteToken.SSO)\n  const isApproved = useAllowance(share, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(share, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, share, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport const useApproveIfo = () => {\n  const { account }: { account: string } = useWallet()\n  const contract = useIfo()\n  const tokenAddress = useToken(QuoteToken.SDO)\n  const isApproved = useAllowance(tokenAddress, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(tokenAddress, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenAddress, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport const useApproveTreasury = (token: QuoteToken, type: PegType) => {\n  const { account }: { account: string } = useWallet()\n  const timelockContract = useTimelock()\n  const treasuryContract = useTreasury(type)\n  const contract = useMemo(() => (type === PegType.SDO ? timelockContract : treasuryContract), [\n    type,\n    timelockContract,\n    treasuryContract,\n  ])\n  const tokenAddress = useToken(token)\n  const isApproved = useAllowance(tokenAddress, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(tokenAddress, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenAddress, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport default useApprove\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { Farm } from 'state/types'\nimport { stake, restake, stakeBoardroom, unstakeBoardroom, swapDollar } from 'utils/callHelpers'\nimport { PegType } from 'config/constants/types'\nimport { useBoardroom, useIfo, useMasterchef } from './useContract'\nimport { fetchFarmUserDataAsync } from '../state/farms'\n\nexport const useStake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stake(masterChefContract, contractPid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n    },\n    [account, dispatch, masterChefContract, contractPid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useStakeToBoardroom = (type: PegType) => {\n  const { account } = useWallet()\n  const contract = useBoardroom(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stakeBoardroom(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSwapIfo = () => {\n  const { account } = useWallet()\n  const contract = useIfo()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await swapDollar(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onSwap: handleStake }\n}\n\nexport const useWithdrawFromBoardroom = (type: PegType) => {\n  const { account } = useWallet()\n  const contract = useBoardroom(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await unstakeBoardroom(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onWithdraw: handleStake }\n}\n\nexport const useReStake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(async () => {\n    const txHash = await restake(masterChefContract, contractPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    console.info(txHash)\n  }, [account, dispatch, masterChefContract, contractPid])\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange?: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value?: string\n  min?: number | string\n  max?: number | string\n  type?: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, startAdornment, ...rest }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput onChange={onChange} {...rest} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from 'uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            Deposit Fee: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n"],"sourceRoot":""}