{"version":3,"sources":["components/LaunchCountdown/LaunchCountdown.tsx","components/LaunchCountdown/index.ts","hooks/useExitBoardroom.ts","hooks/useTokenBalance.ts","hooks/useHarvestFromBoardroom.ts","components/Value/Value.tsx","components/Label/Label.tsx","views/Boardroom/components/Harvest.tsx","views/Boardroom/components/ProgressCountdown.tsx","views/Boardroom/components/Stat.tsx","views/Boardroom/components/Stake.tsx","views/Boardroom/Boardroom.tsx"],"names":["StyledCard","styled","div","props","theme","colors","primary","StyledCountdownTitle","p","secondary","StyledCountdown","LaunchCountdown","deadline","date","renderer","countdownProps","days","hours","minutes","seconds","h","String","m","s","padStart","oneUnit","BigNumber","pow","useExitBoardroom","account","useWallet","contract","useBoardroom","onRedeem","useCallback","a","methods","exit","send","from","txHash","useTokenBalance","token","useState","balance","setBalance","ethereum","fastRefresh","useRefresh","tokenAddress","getTokenAddress","useEffect","getTokenBalance","res","fetchBalance","useHarvestFromBoardroom","onReward","claimReward","StyledValue","Value","value","decimals","fontSize","start","updateStart","end","updateEnd","style","undefined","duration","separator","StyledLabel","isFinished","Label","text","StyledCardHeader","StyledCardActions","spacing","StyledCardContentInner","Harvest","canClaimReward","earnings","earned","call","catch","err","console","error","stack","refreshBalance","setInterval","clearInterval","useEarningsOnBoardroom","toString","onClick","disabled","StyledProgressOuter","contrast","StyledProgress","progress","invertedContrast","StyledDesc","span","ProgressCountdown","base","description","percentage","Date","now","getTime","StyledCardTitle","StyledIcon","StyledTextWrapper","Stat","icon","title","IconButtonWrapper","Stake","canWithdraw","balanceOf","requestedApproval","setRequestedApproval","useApproveBoardroom","onApprove","isApproved","tokenBalance","QuoteToken","SSO","onStake","useStakeToBoardroom","onWithdraw","useWithdrawFromBoardroom","handleApprove","useModal","DepositModal","max","onConfirm","tokenName","onPresentDeposit","WithdrawModal","onPresentWithdraw","toFixed","variant","mr","color","launchTime","StyledBoardroom","StyledHeader","StyledCardsWrapper","StyledCardWrapper","Wrapper","BoardroomHeader","as","size","mb","textAlign","Boardroom","ssoContract","getBoardroom","calls","address","name","params","multicall","boardRoom","fetchAll","useBoardroomState","treasuryAmount","useTokenBalanceInAddress","getTreasury","cashStat","stat","setStat","useOracle","sdo","SDO","fetchCashPrice","twap","cashPrice","refreshInterval","useCashPriceInEstimatedTWAP","scalingFactor","useMemo","toNumber","prevAllocation","nextAllocation","time","setTime","useTreasury","getTreasuryNextAllocationTime","then","useTreasuryAllocationTimes","prevEpoch","moment","utc","startOf","toDate","nextEpoch","add","Page","Flex","Spacer","UnlockButton","mt","fullWidth"],"mappings":"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","file":"static/js/15.62b44152.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown'\r\n\r\ninterface LaunchCountdownProps {\r\n  deadline: Date\r\n}\r\n\r\nconst LaunchCountdown: React.FC<LaunchCountdownProps> = ({ deadline }) => {\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps\r\n    const h = String(days * 24 + hours)\r\n    const m = String(minutes)\r\n    const s = String(seconds)\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledCard>\r\n      <StyledCountdownTitle>Starting In...</StyledCountdownTitle>\r\n      <Countdown date={deadline} renderer={countdownRenderer} />\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nconst StyledCard = styled.div`\r\n  width: 400px;\r\n  background-color: #271c20;\r\n  border: 1px solid ${(props) => props.theme.colors.primary};\r\n  box-sizing: border-box;\r\n  padding: 36px;\r\n  border-radius: 48px;\r\n  box-shadow: 0px 3px 30px #d5d5d5a0;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst StyledCountdownTitle = styled.p`\r\n  font-size: 20px;\r\n  color: ${(props) => props.theme.colors.secondary};\r\n  margin: 0;\r\n`\r\n\r\nconst StyledCountdown = styled.p`\r\n  font-size: 40px;\r\n  color: #d8325e;\r\n  margin: 0;\r\n`\r\n\r\nexport default LaunchCountdown\r\n","import LaunchCountdown from './LaunchCountdown';\r\n\r\nexport default LaunchCountdown;\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { TreasuryAllocationTime } from 'utils'\r\nimport { getTokenAddress } from 'utils/addressHelpers'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getTreasuryNextAllocationTime } from 'utils/callHelpers'\r\nimport { useBoardroom, useOracle, useTreasury } from './useContract'\r\n\r\nconst useExitBoardroom = () => {\r\n  const { account } = useWallet()\r\n  const contract = useBoardroom()\r\n\r\n  const handleExit = useCallback(async () => {\r\n    const txHash = await contract.methods.exit().send({ from: account })\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onRedeem: handleExit }\r\n}\r\n\r\nconst oneUnit = new BigNumber(10).pow(18)\r\n\r\nexport const useCashPriceInEstimatedTWAP = () => {\r\n  const [stat, setStat] = useState(oneUnit)\r\n  const contract = useOracle()\r\n  const sdo = getTokenAddress(QuoteToken.SDO)\r\n\r\n  const fetchCashPrice = useCallback(async () => {\r\n    const cashPrice = await contract.methods.twap(sdo, oneUnit).call()\r\n    setStat(new BigNumber(cashPrice).div(oneUnit))\r\n  }, [contract, sdo])\r\n\r\n  useEffect(() => {\r\n    fetchCashPrice().catch((err) => console.error(`Failed to fetch price: ${err.stack}`))\r\n    const refreshInterval = setInterval(fetchCashPrice, 10000)\r\n    return () => clearInterval(refreshInterval)\r\n  }, [fetchCashPrice, setStat])\r\n\r\n  return stat\r\n}\r\n\r\nexport const useTreasuryAllocationTimes = () => {\r\n  const [time, setTime] = useState<TreasuryAllocationTime>({\r\n    prevAllocation: new Date(),\r\n    nextAllocation: new Date(),\r\n  })\r\n  const contract = useTreasury()\r\n\r\n  useEffect(() => {\r\n    if (contract) {\r\n      getTreasuryNextAllocationTime(contract).then(setTime)\r\n    }\r\n  }, [contract])\r\n  return time\r\n}\r\n\r\nexport default useExitBoardroom\r\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { QuoteToken } from 'config/constants/types'\nimport { getTokenAddress } from 'utils/addressHelpers'\nimport { provider } from 'web3-core'\nimport { getTokenBalance } from 'utils/erc20'\nimport useRefresh from './useRefresh'\nimport { useToken } from './useContract'\n\nconst useTokenBalance = (token: QuoteToken) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n  const tokenAddress = getTokenAddress(token)\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTokenBalanceInAddress = (tokenAddress: string, address: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { ethereum }: { ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, address)\n      setBalance(new BigNumber(res))\n    }\n\n    if (address && ethereum) {\n      fetchBalance()\n    }\n  }, [address, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = (token: QuoteToken) => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n  const contract = useToken(token)\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const supply = await contract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh, contract])\n\n  return totalSupply\n}\n\nexport default useTokenBalance\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport BigNumber from 'bignumber.js'\r\nimport { getBoardroom } from 'utils/addressHelpers'\r\nimport boardRoom from 'config/abi/boardRoom.json'\r\nimport { useBoardroom } from './useContract'\r\n\r\nconst useHarvestFromBoardroom = () => {\r\n  const { account } = useWallet()\r\n  const contract = useBoardroom()\r\n\r\n  const handle = useCallback(async () => {\r\n    const txHash = await contract.methods.claimReward().send({ from: account })\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onReward: handle }\r\n}\r\n\r\nexport const useBoardroomState = () => {\r\n  const { account } = useWallet()\r\n  const [balance, setBalance] = useState([])\r\n  const contract = getBoardroom()\r\n\r\n  useEffect(() => {\r\n    const fetchAll = async () => {\r\n      const calls = [\r\n        {\r\n          address: contract,\r\n          name: 'balanceOf',\r\n          params: [account],\r\n        },\r\n        {\r\n          address: contract,\r\n          name: 'canWithdraw',\r\n          params: [account],\r\n        },\r\n        {\r\n          address: contract,\r\n          name: 'canClaimReward',\r\n          params: [account],\r\n        },\r\n      ]\r\n\r\n      const [balanceOf, canWithdraw, canClaimReward] = await multicall(boardRoom, calls)\r\n      setBalance([new BigNumber(balanceOf).div(new BigNumber(10).pow(18)), canWithdraw[0], canClaimReward[0]])\r\n    }\r\n\r\n    if (account) {\r\n      fetchAll()\r\n    }\r\n  }, [account, contract])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useEarningsOnBoardroom = () => {\r\n  const { account } = useWallet()\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const contract = useBoardroom()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setBalance(await contract.methods.earned(account).call())\r\n  }, [account, contract])\r\n\r\n  useEffect(() => {\r\n    fetchBalance().catch((err) => console.error(err.stack))\r\n\r\n    const refreshBalance = setInterval(fetchBalance, 10000)\r\n    return () => clearInterval(refreshBalance)\r\n  }, [setBalance, fetchBalance])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useHarvestFromBoardroom\r\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react'\nimport CountUp from 'react-countup'\nimport styled from 'styled-components'\n\ninterface ValueProps {\n  value: string | number\n  decimals?: number\n  fontSize?: string | number\n}\n\nconst Value: React.FC<ValueProps> = ({ value, decimals, fontSize = '30px' }) => {\n  const [start, updateStart] = useState(0)\n  const [end, updateEnd] = useState(0)\n\n  useEffect(() => {\n    if (typeof value === 'number') {\n      updateStart(end)\n      updateEnd(value)\n    }\n  }, [value])\n\n  return (\n    <StyledValue style={{ fontSize }}>\n      {typeof value === 'string' ? (\n        value\n      ) : (\n        <CountUp\n          start={start}\n          end={end}\n          decimals={\n            // eslint-disable-next-line no-nested-ternary\n            decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3\n          }\n          duration={1}\n          separator=\",\"\n        />\n      )}\n    </StyledValue>\n  )\n}\n\nconst StyledValue = styled.div`\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 30px;\n  font-weight: 900;\n`\n\nexport default Value\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface LabelProps {\n  text?: string\n  isFinished?: boolean\n}\n\nconst Label: React.FC<LabelProps> = ({ text, isFinished = false }) => (\n  <StyledLabel isFinished={isFinished}>{text}</StyledLabel>\n)\n\nconst StyledLabel = styled.div<{ isFinished: boolean }>`\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'primary']};\n  font-size: 14px;\n`\n\nexport default Label\n","import useHarvestFromBoardroom, { useEarningsOnBoardroom } from 'hooks/useHarvestFromBoardroom'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Card, CardBody } from 'uikit'\r\nimport Value from 'components/Value'\r\nimport Label from 'components/Label'\r\n\r\nconst Harvest: React.FC<any> = ({ canClaimReward }) => {\r\n  const { onReward } = useHarvestFromBoardroom()\r\n  const earnings = useEarningsOnBoardroom()\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <Value value={earnings.toString()} />\r\n            <Label text=\"SDO Earned\" />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            <Button onClick={onReward} disabled={!canClaimReward}>\r\n              Claim Reward\r\n            </Button>\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default Harvest\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Countdown, { CountdownRenderProps } from 'react-countdown';\r\nimport { Card } from 'uikit';\r\n\r\ninterface ProgressCountdownProps {\r\n  base: Date;\r\n  deadline: Date;\r\n  description: string;\r\n}\r\n\r\nconst ProgressCountdown: React.FC<ProgressCountdownProps> = ({\r\n  base,\r\n  deadline,\r\n  description,\r\n}) => {\r\n  const percentage =\r\n    Date.now() >= deadline.getTime()\r\n      ? 100\r\n      : ((Date.now() - base.getTime()) / (deadline.getTime() - base.getTime())) * 100;\r\n\r\n  const countdownRenderer = (countdownProps: CountdownRenderProps) => {\r\n    const { days, hours, minutes, seconds } = countdownProps;\r\n    const h = String(days * 24 + hours);\r\n    const m = String(minutes);\r\n    const s = String(seconds);\r\n    return (\r\n      <StyledCountdown>\r\n        {h.padStart(2, '0')}:{m.padStart(2, '0')}:{s.padStart(2, '0')}\r\n      </StyledCountdown>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Card>\r\n      <StyledCardContentInner>\r\n        <StyledDesc>{description}</StyledDesc>\r\n        <Countdown date={deadline} renderer={countdownRenderer} />\r\n        <StyledProgressOuter>\r\n          <StyledProgress progress={percentage} />\r\n        </StyledProgressOuter>\r\n      </StyledCardContentInner>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst StyledCountdown = styled.p`\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n  margin: 0 0 6px 0;\r\n`;\r\n\r\nconst StyledProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 8px;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.colors.contrast};\r\n`;\r\n\r\nconst StyledProgress = styled.div<{ progress: number }>`\r\n  width: ${(props) => props.progress}%;\r\n  height: 100%;\r\n  border-radius: 3px;\r\n  background: ${(props) => props.theme.colors.invertedContrast};\r\n`;\r\n\r\nconst StyledDesc = styled.span`\r\n  font-weight: 700;\r\n  font-size: 12px;\r\n  text-align: center;\r\n`;\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`;\r\n\r\nexport default ProgressCountdown;\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card } from 'uikit'\r\n\r\ninterface StatProps {\r\n  icon: string\r\n  title: string\r\n  description: string\r\n}\r\n\r\nconst Stat: React.FC<StatProps> = ({ icon, title, description }) => {\r\n  return (\r\n    <Card>\r\n      <StyledCardContentInner>\r\n        <StyledIcon>{icon}</StyledIcon>\r\n        <StyledTextWrapper>\r\n          <StyledCardTitle>{title}</StyledCardTitle>\r\n          <StyledDesc>{description}</StyledDesc>\r\n        </StyledTextWrapper>\r\n      </StyledCardContentInner>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StyledCardTitle = styled.div`\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst StyledDesc = styled.span`\r\n  color: ${(props) => props.theme.colors.secondary};\r\n`\r\n\r\nconst StyledIcon = styled.span`\r\n  font-size: 28px;\r\n  margin-right: 10px;\r\n`\r\n\r\nconst StyledTextWrapper = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  padding: ${(props) => props.theme.spacing[2]}px ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nexport default Stat\r\n","import React, { useCallback, useState } from 'react'\r\nimport { useApproveBoardroom } from 'hooks/useApprove'\r\nimport styled from 'styled-components'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\r\nimport { AddIcon, Button, Card, CardBody, IconButton, MinusIcon, useModal } from 'uikit'\r\nimport Value from 'components/Value'\r\nimport Label from 'components/Label'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useStakeToBoardroom, useWithdrawFromBoardroom } from 'hooks/useStake'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst Stake: React.FC<any> = ({ canWithdraw, balanceOf }) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { onApprove, isApproved } = useApproveBoardroom()\r\n  const tokenBalance = useTokenBalance(QuoteToken.SSO)\r\n  const { onStake } = useStakeToBoardroom()\r\n  const { onWithdraw } = useWithdrawFromBoardroom()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName=\"SSO\" />)\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={balanceOf} onConfirm={onWithdraw} tokenName=\"SSO\" />)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <StyledCardContentInner>\r\n          <StyledCardHeader>\r\n            <Value value={balanceOf?.toFixed(4)} />\r\n            <Label text=\"SSO Staked\" />\r\n          </StyledCardHeader>\r\n          <StyledCardActions>\r\n            {!isApproved ? (\r\n              <Button disabled={requestedApproval} onClick={handleApprove}>\r\n                Approve SSO\r\n              </Button>\r\n            ) : (\r\n              <IconButtonWrapper>\r\n                <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\" disabled={!canWithdraw}>\r\n                  <MinusIcon color=\"primary\" />\r\n                </IconButton>\r\n                <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n                  <AddIcon color=\"primary\" />\r\n                </IconButton>\r\n              </IconButtonWrapper>\r\n            )}\r\n          </StyledCardActions>\r\n        </StyledCardContentInner>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst StyledCardHeader = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\nconst StyledCardActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: ${(props) => props.theme.spacing[6]}px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledCardContentInner = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default Stake\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport Spacer from 'components/Spacer'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport LaunchCountdown from 'components/LaunchCountdown'\r\nimport moment from 'moment'\r\nimport useExitBoardroom, { useCashPriceInEstimatedTWAP, useTreasuryAllocationTimes } from 'hooks/useExitBoardroom'\r\nimport { useTokenBalanceInAddress } from 'hooks/useTokenBalance'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { getTokenAddress, getTreasury } from 'utils/addressHelpers'\r\nimport { Heading, Button } from 'uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Page from 'components/layout/Page'\r\nimport { useBoardroomState } from 'hooks/useHarvestFromBoardroom'\r\nimport Harvest from './components/Harvest'\r\nimport ProgressCountdown from './components/ProgressCountdown'\r\nimport Stat from './components/Stat'\r\nimport Stake from './components/Stake'\r\n\r\nconst launchTime = new Date(1616730082000)\r\n\r\nconst StyledBoardroom = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst StyledHeader = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-bottom: ${(props) => props.theme.spacing[5]}px;\r\n  width: 960px;\r\n\r\n  > * {\r\n    flex: 1;\r\n    height: 84px;\r\n    margin: 0 ${(props) => props.theme.spacing[2]}px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst StyledCardsWrapper = styled.div`\r\n  display: flex;\r\n  width: 600px;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n  }\r\n`\r\n\r\nconst StyledCardWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst BoardroomHeader = () => {\r\n  return (\r\n    <Heading as=\"h1\" size=\"lg\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n      💱 Boardroom\r\n    </Heading>\r\n  )\r\n}\r\n\r\nconst Boardroom: React.FC = () => {\r\n  const { account } = useWallet()\r\n  const ssoContract = getTokenAddress(QuoteToken.SSO)\r\n  const { onRedeem } = useExitBoardroom()\r\n  const [balanceOf, canWithdraw, canClaimReward] = useBoardroomState()\r\n  const treasuryAmount = useTokenBalanceInAddress(ssoContract, getTreasury())\r\n\r\n  const cashStat = useCashPriceInEstimatedTWAP()\r\n  const scalingFactor = useMemo(() => (cashStat ? cashStat.toNumber().toFixed(2) : null), [cashStat])\r\n  const { prevAllocation, nextAllocation } = useTreasuryAllocationTimes()\r\n\r\n  const prevEpoch = useMemo(\r\n    () => (nextAllocation.getTime() <= Date.now() ? moment().utc().startOf('day').toDate() : prevAllocation),\r\n    [prevAllocation, nextAllocation],\r\n  )\r\n  const nextEpoch = useMemo(() => moment(prevEpoch).add(8, 'hours').toDate(), [prevEpoch])\r\n\r\n  const isLaunched = Date.now() >= launchTime.getTime()\r\n\r\n  if (!isLaunched) {\r\n    return (\r\n      <Page>\r\n        <BoardroomHeader />\r\n        <Wrapper>\r\n          <LaunchCountdown deadline={launchTime} />\r\n        </Wrapper>\r\n      </Page>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <FlexLayout>\r\n        <BoardroomHeader />\r\n        {account && (\r\n          <Button disabled={!canWithdraw} onClick={onRedeem}>\r\n            Settle & Withdraw\r\n          </Button>\r\n        )}\r\n      </FlexLayout>\r\n      <StyledHeader>\r\n        <ProgressCountdown base={prevEpoch} deadline={nextEpoch} description=\"Next Epoch\" />\r\n        <Stat icon=\"💵\" title={cashStat ? `$${cashStat.toFixed(2)}` : '-'} description=\"SDO Price (TWAP)\" />\r\n        <Stat icon=\"🚀\" title={scalingFactor ? `x${scalingFactor}` : '-'} description=\"Scaling Factor\" />\r\n        <Stat icon=\"💰\" title={treasuryAmount ? `~$${treasuryAmount.toFixed(2)}` : '-'} description=\"Treasury Amount\" />\r\n      </StyledHeader>\r\n      <StyledBoardroom>\r\n        <StyledCardsWrapper>\r\n          {account ? (\r\n            <>\r\n              <StyledCardWrapper>\r\n                <Harvest canClaimReward={canClaimReward} />\r\n              </StyledCardWrapper>\r\n              <Spacer />\r\n              <StyledCardWrapper>\r\n                <Stake balanceOf={balanceOf} canWithdraw={canWithdraw} />\r\n              </StyledCardWrapper>\r\n            </>\r\n          ) : (\r\n            <UnlockButton mt=\"8px\" fullWidth />\r\n          )}\r\n        </StyledCardsWrapper>\r\n      </StyledBoardroom>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Boardroom\r\n"],"sourceRoot":""}