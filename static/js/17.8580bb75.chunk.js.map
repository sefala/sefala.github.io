{"version":3,"sources":["hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CardValue.tsx","views/Home/components/CakeStats.tsx","views/Home/Home.tsx"],"names":["useAllEarnings","type","useState","balances","setBalance","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farms","filter","x","map","farm","address","getMasterChefAddress","name","params","contractPid","multicall","getChefAbi","res","console","error","fetchAllBalances","CakeHarvestBalance","necroPrice","farmType","earningsSum","reduce","accum","earning","BigNumber","div","pow","toNumber","allvalue","toFixed","allEarningsX","multipliedBy","bold","fontSize","style","lineHeight","color","StyledFarmStakingCard","styled","Card","Block","Label","theme","colors","secondary","FarmedStakingCard","price","usePriceDollar","size","mb","FarmType","PARTNERS","DOLLAR","CardValue","value","decimals","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","StyledCakeStats","Divider","borderColor","CakeStats","totalValue","useTotalValue","Hero","Cards","BaseLayout","mediaQueries","sm","lg","StyledCardHeader","Home","useSupplyState","totalSdo","totalSso","totalSbo","Page","Flex","Value","text","FarmStakingCard"],"mappings":"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","file":"static/js/17.8580bb75.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farms from 'config/constants'\nimport { FarmType } from 'config/constants/types'\nimport { getChefAbi } from './useContract'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = (type: FarmType) => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farms\n        .filter((x) => x.type === type)\n        .map((farm) => ({\n          address: getMasterChefAddress(farm.type),\n          name: 'pendingReward',\n          params: [farm.contractPid, account],\n        }))\n        \n      try {\n        const res = await multicall(getChefAbi(type) as any, calls)\n\n        setBalance(res)\n      } catch {\n        console.error('IGNORE FOR NOW')\n      }\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh, type])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from 'uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { FarmType } from 'config/constants/types'\n\ninterface CardValueProps {\n  necroPrice?: BigNumber,\n  farmType: FarmType\n}\n\nconst CakeHarvestBalance: React.FC<CardValueProps> = ({ necroPrice, farmType }) => {\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings(farmType)\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const allvalue = earningsSum.toFixed(4)\n\n  const allEarningsX = necroPrice.multipliedBy(earningsSum).toFixed(2)\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return (\n    <Text bold fontSize=\"24px\" style={{ lineHeight: '60px' }} color=\"secondary\">\n      {' '}\n      {` ${allvalue} ( ${allEarningsX} $ )`}{' '}\n    </Text>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody } from 'uikit'\nimport { FarmType } from 'config/constants/types'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport { usePriceDollar } from '../../../state/hooks'\n\nconst StyledFarmStakingCard = styled(Card)`\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-size: 14px;\n`\n\nconst FarmedStakingCard: React.FC = () => {\n  const price = usePriceDollar()\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Supra Dollar Banks\n        </Heading>\n        <Block>\n          <CakeHarvestBalance necroPrice={price} farmType={FarmType.PARTNERS} />\n          <Label>Supra Dollar to Harvest (Partners Banks)</Label>\n        </Block>\n        <Block>\n          <CakeHarvestBalance necroPrice={price} farmType={FarmType.DOLLAR} />\n          <Label>Supra Dollar to Harvest (Dollar Banks)</Label>\n        </Block>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text color=\"textSubtle\" bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Card, CardBody, Heading } from 'uikit'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport { useTotalValue } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 18px auto;\n  width: 100%;\n`\n\nconst CakeStats = () => {\n  const totalValue = useTotalValue()\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          Total Value Locked (TVL)\n        </Heading>\n        <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n        <Divider />\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BaseLayout, Card, CardBody, Heading } from 'uikit'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useSupplyState } from 'hooks/useHarvestFromBoardroom'\nimport { usePriceDollar } from 'state/hooks'\nimport Value from 'components/Value'\nimport Label from 'components/Label'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport CakeStats from './components/CakeStats'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/logo-big.png');\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n  min-height: 200px;\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n`\n\nconst Home: React.FC = () => {\n  const price = usePriceDollar()\n  const [totalSdo, totalSso, totalSbo] = useSupplyState()\n\n  return (\n    <Page>\n      <Hero />\n      <FlexLayout>\n        <Card>\n          <CardBody>\n            <Heading>Supra Dollar</Heading>\n            <StyledCardHeader>\n              <Value value={totalSdo.toFixed(3)} />\n              <Label text=\"Circulating Supply\" />\n            </StyledCardHeader>\n            <StyledCardHeader>\n              <Value value={price.toFixed(3)} />\n              <Label text=\"Price\" />\n            </StyledCardHeader>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardBody>\n            <Heading>Supra Share</Heading>\n            <StyledCardHeader>\n              <Value value={totalSso.toFixed(3)} />\n              <Label text=\"Total Supply\" />\n            </StyledCardHeader>\n            <StyledCardHeader>\n              <Value value={0} />\n              <Label text=\"Price\" />\n            </StyledCardHeader>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardBody>\n            <Heading>Supra Bond</Heading>\n            <StyledCardHeader>\n              <Value value={totalSbo.toFixed(3)} />\n              <Label text=\"Total Supply\" />\n            </StyledCardHeader>\n            <StyledCardHeader>\n              <Value value={0} />\n              <Label text=\"Price\" />\n            </StyledCardHeader>\n          </CardBody>\n        </Card>\n      </FlexLayout>\n      <Cards>\n        <FarmStakingCard />\n        <CakeStats />\n      </Cards>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}