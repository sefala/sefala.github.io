{"version":3,"sources":["config/index.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useUnstake.ts","views/Farms/components/FarmCard/StakeAction.tsx","hooks/useHarvest.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","StyledLinkExternal","LinkExternal","text","getSwapUrl","swap","Swap","HYPR","SLIME","DetailsSection","farm","tokenSymbol","quoteTokenSymbol","isTokenOnly","lpAddresses","firstPart","QuoteToken","BNB","contracts","CHAIN_ID","secondPart","bscScanAddress","getUrls","liquidityUrlPathParts","totalValueFormated","totalValue","Number","toLocaleString","undefined","maximumFractionDigits","justifyContent","href","lpSymbol","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","lpLabel","multiplier","farmImage","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useUnstake","contractPid","type","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onUnstake","useCallback","amount","a","unstake","txHash","fetchFarmUserDataAsync","console","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","onStake","useStake","rawStakedBalance","getBalanceNumber","displayBalance","useModal","DepositModal","max","onConfirm","tokenName","depositFeeBP","onPresentDeposit","WithdrawModal","onPresentWithdraw","mr","useHarvest","onReward","harvest","BalanceAndCompound","HarvestAction","earnings","useState","pendingTx","setPendingTx","rawEarningsBalance","disabled","Action","Divider","borderColor","CardActions","ethereum","earnToken","TranslateString","useI18n","requestedApproval","setRequestedApproval","useFarmUser","pid","allowance","lpAddress","process","tokenAddress","lpName","toUpperCase","isApproved","isGreaterThan","lpContract","useMemo","getContract","onApprove","useApprove","handleApprove","error","startTime","renderButton","Date","now","mt","fullWidth","date","renderer","countdownProps","hours","minutes","seconds","paddedSeconds","paddedMinutes","paddedHours","fontSize","pr","textTransform","UnlockButton","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","ExpandingWrapper","FarmCard","isSSO","showExpandableSection","setShowExpandableSection","toLowerCase","earnLabel","SSO","SDO","farmAPY","apy","times","toNumber","minimumFractionDigits","style","display","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","size","as","Link","to","Farms","path","farmsLP","useFarms","necroPrice","usePriceVoodooBnb","bnbPrice","usePriceBnbBusd","fastRefresh","useRefresh","useEffect","activeFarms","filter","FarmType","SHARE","PARTNERS","inactiveFarms","DOLLAR","farmsList","farmsToDisplay","map","cakeRewardPerYear","tokenPerBLock","poolWeight","pow","calculateTotal","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/17.f4255fe6.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from 'uikit'\nimport { QuoteToken, Swap } from 'config/constants/types'\nimport contracts from 'config/constants/contracts'\nimport { FarmWithStakedValue } from 'state/types'\n\nexport interface ExpandableSectionProps {\n  farm: FarmWithStakedValue\n}\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst getSwapUrl = (swap: Swap) => {\n  if (swap === Swap.HYPR) return 'https://swap.hyperjump.fi/#/'\n  if (swap === Swap.SLIME) return 'https://dex.slime.finance/#/'\n\n  return 'https://exchange.pancakeswap.finance/#/'\n}\n\nconst getUrls = ({ tokenSymbol, quoteTokenSymbol, isTokenOnly, lpAddresses, swap }: FarmWithStakedValue) => {\n  const firstPart = quoteTokenSymbol === QuoteToken.BNB ? 'ETH' : contracts[quoteTokenSymbol][CHAIN_ID]\n  const secondPart = contracts[tokenSymbol][CHAIN_ID]\n\n  const bscScanAddress = isTokenOnly\n    ? `https://bscscan.com/token/${secondPart}`\n    : `https://bscscan.com/token/${lpAddresses[CHAIN_ID]}`\n\n  return [`${getSwapUrl(swap)}add/${firstPart}/${secondPart}`, bscScanAddress]\n}\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({ farm }) => {\n  const [liquidityUrlPathParts, bscScanAddress] = getUrls(farm)\n  const totalValueFormated = farm.totalValue\n    ? `$${Number(farm.totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>Stake:</Text>\n        <StyledLinkExternal href={liquidityUrlPathParts}>{farm.lpSymbol}</StyledLinkExternal>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>Total Liquidity:</Text>\n        <Text>{totalValueFormated}</Text>\n      </Flex>\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          View on BscScan\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport { Tag, VerifiedIcon } from 'uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nexport default NoFeeTag;","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from 'uikit'\nimport NoFeeTag from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, farmImage, tokenSymbol, depositFee }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { Farm } from 'state/types'\nimport { unstake } from 'utils/callHelpers'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useMasterchef } from './useContract'\n\nconst useUnstake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, contractPid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, contractPid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'uikit'\nimport { useStake } from 'hooks/useStake'\nimport { FarmWithStakedValue } from 'state/types'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  farm: FarmWithStakedValue\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, farm }) => {\n  const { onStake } = useStake(farm)\n  const { onUnstake } = useUnstake(farm)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={farm.lpSymbol} depositFeeBP={farm.depositFeeBP} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={farm.lpSymbol} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>Stake</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { Farm } from 'state/types'\nimport { harvest } from 'utils/callHelpers'\nimport { useMasterchef } from './useContract'\nimport { fetchFarmUserDataAsync } from '../state/farms'\n\nconst useHarvest = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, contractPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, contractPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvest\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'uikit'\nimport useHarvest from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport { Farm } from 'state/types'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  farm: Farm\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, farm }) => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(farm)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          Harvest\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from 'uikit'\nimport { FarmWithStakedValue } from 'state/types'\nimport contracts from 'config/constants/contracts'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport useApprove from 'hooks/useApprove'\nimport Countdown, { CountdownRenderProps } from 'react-countdown'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  earnToken?: string\n}\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, earnToken }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(farm.pid)\n  const lpAddress = farm.lpAddresses[CHAIN_ID]\n  const tokenAddress = contracts[farm.tokenSymbol][CHAIN_ID]\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => getContract(ethereum as provider, farm.isTokenOnly ? tokenAddress : lpAddress), [\n    ethereum,\n    lpAddress,\n    tokenAddress,\n    farm.isTokenOnly,\n  ])\n\n  const { onApprove } = useApprove(farm.type, lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        farm={farm}\n      />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  const renderer = (countdownProps: CountdownRenderProps) => {\n    const { hours, minutes, seconds } = countdownProps\n    const paddedSeconds = seconds < 10 ? `0${seconds}` : seconds\n    const paddedMinutes = minutes < 10 ? `0${minutes}` : minutes\n    const paddedHours = hours < 10 ? `0${hours}` : hours\n    return (\n      <>\n        <Divider />\n        <Text fontSize=\"14px\" pr=\"3px\">\n          {farm.lpSymbol} pool starts: {paddedHours}:{paddedMinutes}:{paddedSeconds}\n        </Text>\n      </>\n    )\n  }\n  let { startTime } = farm\n  if (!startTime) startTime = 0\n  // setStartTime(500000000);\n  const poolActive = startTime * 1000 - Date.now() <= 0 // startTime * 1000 - Date.now() <= 0\n\n  const renderButton = !poolActive ? (\n    <Countdown date={new Date(startTime * 1000)} renderer={renderer} />\n  ) : (\n    renderApprovalOrStakeButton()\n  )\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {earnToken}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} farm={farm} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Staked\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderButton}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'uikit'\nimport { FarmWithStakedValue } from 'state/types'\nimport { QuoteToken } from 'config/constants/types'\nimport { provider } from 'web3-core'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n  min-height: 476px;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 18px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n  isSSO: boolean\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, ethereum, account, isSSO }) => {\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const farmImage = farm.isTokenOnly\n    ? farm.tokenSymbol.toLowerCase()\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const earnLabel = isSSO ? QuoteToken.SSO : QuoteToken.SDO\n\n  const farmAPY =\n    farm.apy &&\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    })\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === earnLabel && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={farm.lpSymbol}\n        multiplier={farm.multiplier}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Text>APR:</Text>\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n          {farm.apy ? <>{farmAPY}%</> : <Skeleton height={24} width={80} />}\n        </Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text>Earn:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: '24px' }}>Deposit Fee:</Text>\n        <Text bold style={{ fontSize: '24px' }}>\n          {farm.depositFeeBP / 100}%\n        </Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} earnToken={earnLabel} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection farm={farm} />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from 'uikit'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          Partners Banks\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/token`}>\n          Dollar Banks\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n","import React, { useEffect, useCallback } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Heading } from 'uikit'\nimport { calculateTotal } from 'utils/getFarmConfig'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport { FarmWithStakedValue } from 'state/types'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceVoodooBnb } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { FarmType } from 'config/constants/types'\nimport FarmCard from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { fetchFarmUserDataAsync } from '../../state/farms'\n\ninterface FarmProps {\n  isSSO: boolean\n}\n\nconst Farms: React.FC<FarmProps> = ({ isSSO }) => {\n  const { path } = useRouteMatch()\n  const farmsLP = useFarms()\n  const necroPrice = usePriceVoodooBnb()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n  const activeFarms = isSSO\n    ? farmsLP.filter((farm) => farm.type === FarmType.SHARE)\n    : farmsLP.filter((farm) => farm.type === FarmType.PARTNERS)\n  const inactiveFarms = farmsLP.filter((farm) => farm.type === FarmType.DOLLAR)\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay) => {\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        const cakeRewardPerBlock = new BigNumber(farm.tokenPerBLock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = necroPrice.times(cakeRewardPerYear)\n        const totalValue = calculateTotal(farm, bnbPrice, necroPrice)\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, totalValue, apy }\n      })\n\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard key={farm.pid} farm={farm} ethereum={ethereum} account={account} isSSO={isSSO} />\n      ))\n    },\n    [bnbPrice, account, necroPrice, ethereum, isSSO],\n  )\n\n  return (\n    <Page>\n      <FlexLayout>\n        <Heading as=\"h1\" size=\"lg\" mb=\"50px\" style={{ textAlign: 'center' }}>\n          {isSSO ? '🏦 Pick a Share Bank' : '🏧 Pick a Bank'}\n        </Heading>\n        {!isSSO && <FarmTabButtons />}\n      </FlexLayout>\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {farmsList(activeFarms)}\n        </Route>\n        {!isSSO && (\n          <Route exact path={`${path}/token`}>\n            {farmsList(inactiveFarms)}\n          </Route>\n        )}\n      </FlexLayout>\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}