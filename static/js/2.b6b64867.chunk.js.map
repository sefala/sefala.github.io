{"version":3,"sources":["../node_modules/react-countdown/dist/index.es.js","../node_modules/bignumber.js/bignumber.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","p","_possibleConstructorReturn","self","call","ReferenceError","_assertThisInitialized","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","e","_isNativeReflectConstruct","result","Super","NewTarget","this","arguments","apply","_toConsumableArray","arr","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","iter","Symbol","iterator","from","_iterableToArray","minLen","n","slice","name","test","_unsupportedIterableToArray","_nonIterableSpread","len","arr2","zeroPad","undefined","strValue","String","match","prefix","suffix","strNo","paddedNo","map","join","concat","timeDeltaFormatOptionsDefaults","daysInHours","zeroPadTime","formatTimeDelta","timeDelta","options","days","hours","minutes","seconds","_Object$assign","assign","_Object$assign$zeroPa","zeroPadDays","zeroPadTimeLength","Math","min","formattedHours","Countdown","_React$Component","_super","_this","state","count","startCountdown","interval","window","setInterval","stopCountdown","onComplete","setState","prevState","clearInterval","addTime","children","cloneElement","Component","propTypes","number","element","func","Countdown$1","mounted","initialTimestamp","calcOffsetStartTimestamp","offsetStartTimestamp","autoStart","offsetTime","legacyMode","legacyCountdownRef","createRef","tick","calcTimeDelta","callback","completed","overtime","onTick","setTimeDeltaState","start","isStarted","prevOffsetStartTimestamp","onStart","controlled","clearTimer","intervalDelay","pause","isPaused","onPause","stop","isStopped","onStop","isStatus","isCompleted","handleOnComplete","date","status","onMount","prevProps","shallowCompare","_this$props","now","precision","startTimestamp","_options$now","_options$precision","_options$offsetTime","getTime","timeLeft","clampedPrecision","max","total","round","parseFloat","toFixed","abs","floor","milliseconds","Number","current","objA","objB","keysA","keys","some","keyA","valueA","valueB","hasOwnProperty","_this2","completedCallback","newStatus","api","_this$props2","getApi","formatted","_this$props3","_children","createElement","ref","_this$props4","className","renderer","renderProps","getRenderProps","countdown","_renderProps$formatte","defaultProps","oneOfType","instanceOf","string","bool","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","a","s","z","j","r","charCodeAt","compare","x","y","b","xc","c","yc","k","l","intCheck","Error","isOdd","toExponential","str","charAt","toFixedPoint","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","ALPHABET","v","alphabet","caseChanged","isNum","_isBigNumber","indexOf","replace","search","substring","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","pow","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","shiftedBy","squareRoot","sqrt","rep","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","toStringTag","for"],"mappings":"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","file":"static/js/2.b6b64867.chunk.js","sourcesContent":["import { cloneElement, Component, createRef, createElement } from 'react';\nimport { number, element, func, oneOfType, instanceOf, string, bool } from 'prop-types';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction zeroPad(value) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var strValue = String(value);\n  if (length === 0) return strValue;\n  var match = strValue.match(/(.*?)([0-9]+)(.*)/);\n  var prefix = match ? match[1] : '';\n  var suffix = match ? match[3] : '';\n  var strNo = match ? match[2] : strValue;\n  var paddedNo = strNo.length >= length ? strNo : (_toConsumableArray(Array(length)).map(function () {\n    return '0';\n  }).join('') + strNo).slice(length * -1);\n  return \"\".concat(prefix).concat(paddedNo).concat(suffix);\n}\nvar timeDeltaFormatOptionsDefaults = {\n  daysInHours: false,\n  zeroPadTime: 2\n};\nfunction calcTimeDelta(date) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$now = options.now,\n      now = _options$now === void 0 ? Date.now : _options$now,\n      _options$precision = options.precision,\n      precision = _options$precision === void 0 ? 0 : _options$precision,\n      controlled = options.controlled,\n      _options$offsetTime = options.offsetTime,\n      offsetTime = _options$offsetTime === void 0 ? 0 : _options$offsetTime,\n      overtime = options.overtime;\n  var startTimestamp;\n\n  if (typeof date === 'string') {\n    startTimestamp = new Date(date).getTime();\n  } else if (date instanceof Date) {\n    startTimestamp = date.getTime();\n  } else {\n    startTimestamp = date;\n  }\n\n  if (!controlled) {\n    startTimestamp += offsetTime;\n  }\n\n  var timeLeft = controlled ? startTimestamp : startTimestamp - now();\n  var clampedPrecision = Math.min(20, Math.max(0, precision));\n  var total = Math.round(parseFloat(((overtime ? timeLeft : Math.max(0, timeLeft)) / 1000).toFixed(clampedPrecision)) * 1000);\n  var seconds = Math.abs(total) / 1000;\n  return {\n    total: total,\n    days: Math.floor(seconds / (3600 * 24)),\n    hours: Math.floor(seconds / 3600 % 24),\n    minutes: Math.floor(seconds / 60 % 60),\n    seconds: Math.floor(seconds % 60),\n    milliseconds: Number((seconds % 1 * 1000).toFixed()),\n    completed: total <= 0\n  };\n}\nfunction formatTimeDelta(timeDelta, options) {\n  var days = timeDelta.days,\n      hours = timeDelta.hours,\n      minutes = timeDelta.minutes,\n      seconds = timeDelta.seconds;\n\n  var _Object$assign = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), options),\n      daysInHours = _Object$assign.daysInHours,\n      zeroPadTime = _Object$assign.zeroPadTime,\n      _Object$assign$zeroPa = _Object$assign.zeroPadDays,\n      zeroPadDays = _Object$assign$zeroPa === void 0 ? zeroPadTime : _Object$assign$zeroPa;\n\n  var zeroPadTimeLength = Math.min(2, zeroPadTime);\n  var formattedHours = daysInHours ? zeroPad(hours + days * 24, zeroPadTime) : zeroPad(hours, zeroPadTimeLength);\n  return {\n    days: daysInHours ? '' : zeroPad(days, zeroPadDays),\n    hours: formattedHours,\n    minutes: zeroPad(minutes, zeroPadTimeLength),\n    seconds: zeroPad(seconds, zeroPadTimeLength)\n  };\n}\n\nvar Countdown = function (_React$Component) {\n  _inherits(Countdown, _React$Component);\n\n  var _super = _createSuper(Countdown);\n\n  function Countdown() {\n    var _this;\n\n    _classCallCheck(this, Countdown);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      count: _this.props.count || 3\n    };\n\n    _this.startCountdown = function () {\n      _this.interval = window.setInterval(function () {\n        var count = _this.state.count - 1;\n\n        if (count === 0) {\n          _this.stopCountdown();\n\n          _this.props.onComplete && _this.props.onComplete();\n        } else {\n          _this.setState(function (prevState) {\n            return {\n              count: prevState.count - 1\n            };\n          });\n        }\n      }, 1000);\n    };\n\n    _this.stopCountdown = function () {\n      clearInterval(_this.interval);\n    };\n\n    _this.addTime = function (seconds) {\n      _this.stopCountdown();\n\n      _this.setState(function (prevState) {\n        return {\n          count: prevState.count + seconds\n        };\n      }, _this.startCountdown);\n    };\n\n    return _this;\n  }\n\n  _createClass(Countdown, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startCountdown();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children ? cloneElement(this.props.children, {\n        count: this.state.count\n      }) : null;\n    }\n  }]);\n\n  return Countdown;\n}(Component);\nCountdown.propTypes = {\n  count: number,\n  children: element,\n  onComplete: func\n};\n\nvar Countdown$1 = function (_React$Component) {\n  _inherits(Countdown$1, _React$Component);\n\n  var _super = _createSuper(Countdown$1);\n\n  function Countdown$1(props) {\n    var _this;\n\n    _classCallCheck(this, Countdown$1);\n\n    _this = _super.call(this, props);\n    _this.mounted = false;\n    _this.initialTimestamp = _this.calcOffsetStartTimestamp();\n    _this.offsetStartTimestamp = _this.props.autoStart ? 0 : _this.initialTimestamp;\n    _this.offsetTime = 0;\n    _this.legacyMode = false;\n    _this.legacyCountdownRef = createRef();\n\n    _this.tick = function () {\n      var timeDelta = _this.calcTimeDelta();\n\n      var callback = timeDelta.completed && !_this.props.overtime ? undefined : _this.props.onTick;\n\n      _this.setTimeDeltaState(timeDelta, undefined, callback);\n    };\n\n    _this.start = function () {\n      if (_this.isStarted()) return;\n      var prevOffsetStartTimestamp = _this.offsetStartTimestamp;\n      _this.offsetStartTimestamp = 0;\n      _this.offsetTime += prevOffsetStartTimestamp ? _this.calcOffsetStartTimestamp() - prevOffsetStartTimestamp : 0;\n\n      var timeDelta = _this.calcTimeDelta();\n\n      _this.setTimeDeltaState(timeDelta, \"STARTED\", _this.props.onStart);\n\n      if (!_this.props.controlled && (!timeDelta.completed || _this.props.overtime)) {\n        _this.clearTimer();\n\n        _this.interval = window.setInterval(_this.tick, _this.props.intervalDelay);\n      }\n    };\n\n    _this.pause = function () {\n      if (_this.isPaused()) return;\n\n      _this.clearTimer();\n\n      _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();\n\n      _this.setTimeDeltaState(_this.state.timeDelta, \"PAUSED\", _this.props.onPause);\n    };\n\n    _this.stop = function () {\n      if (_this.isStopped()) return;\n\n      _this.clearTimer();\n\n      _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();\n      _this.offsetTime = _this.offsetStartTimestamp - _this.initialTimestamp;\n\n      _this.setTimeDeltaState(_this.calcTimeDelta(), \"STOPPED\", _this.props.onStop);\n    };\n\n    _this.isStarted = function () {\n      return _this.isStatus(\"STARTED\");\n    };\n\n    _this.isPaused = function () {\n      return _this.isStatus(\"PAUSED\");\n    };\n\n    _this.isStopped = function () {\n      return _this.isStatus(\"STOPPED\");\n    };\n\n    _this.isCompleted = function () {\n      return _this.isStatus(\"COMPLETED\");\n    };\n\n    _this.handleOnComplete = function (timeDelta) {\n      if (_this.props.onComplete) _this.props.onComplete(timeDelta);\n    };\n\n    if (props.date) {\n      var timeDelta = _this.calcTimeDelta();\n\n      _this.state = {\n        timeDelta: timeDelta,\n        status: timeDelta.completed ? \"COMPLETED\" : \"STOPPED\"\n      };\n    } else {\n      _this.legacyMode = true;\n    }\n\n    return _this;\n  }\n\n  _createClass(Countdown$1, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.legacyMode) {\n        return;\n      }\n\n      this.mounted = true;\n      if (this.props.onMount) this.props.onMount(this.calcTimeDelta());\n      if (this.props.autoStart) this.start();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.legacyMode) {\n        return;\n      }\n\n      if (!this.shallowCompare(this.props, prevProps)) {\n        if (this.props.date !== prevProps.date) {\n          this.initialTimestamp = this.calcOffsetStartTimestamp();\n          this.offsetStartTimestamp = this.initialTimestamp;\n          this.offsetTime = 0;\n        }\n\n        this.setTimeDeltaState(this.calcTimeDelta());\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.legacyMode) {\n        return;\n      }\n\n      this.mounted = false;\n      this.clearTimer();\n    }\n  }, {\n    key: \"calcTimeDelta\",\n    value: function calcTimeDelta$1() {\n      var _this$props = this.props,\n          date = _this$props.date,\n          now = _this$props.now,\n          precision = _this$props.precision,\n          controlled = _this$props.controlled,\n          overtime = _this$props.overtime;\n      return calcTimeDelta(date, {\n        now: now,\n        precision: precision,\n        controlled: controlled,\n        offsetTime: this.offsetTime,\n        overtime: overtime\n      });\n    }\n  }, {\n    key: \"calcOffsetStartTimestamp\",\n    value: function calcOffsetStartTimestamp() {\n      return Date.now();\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(seconds) {\n      this.legacyCountdownRef.current.addTime(seconds);\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      window.clearInterval(this.interval);\n    }\n  }, {\n    key: \"isStatus\",\n    value: function isStatus(status) {\n      return this.state.status === status;\n    }\n  }, {\n    key: \"shallowCompare\",\n    value: function shallowCompare(objA, objB) {\n      var keysA = Object.keys(objA);\n      return keysA.length === Object.keys(objB).length && !keysA.some(function (keyA) {\n        var valueA = objA[keyA];\n        var valueB = objB[keyA];\n        return !objB.hasOwnProperty(keyA) || !(valueA === valueB || valueA !== valueA && valueB !== valueB);\n      });\n    }\n  }, {\n    key: \"setTimeDeltaState\",\n    value: function setTimeDeltaState(timeDelta, status, callback) {\n      var _this2 = this;\n\n      if (!this.mounted) return;\n      var completedCallback;\n\n      if (!this.state.timeDelta.completed && timeDelta.completed) {\n        if (!this.props.overtime) this.clearTimer();\n        completedCallback = this.handleOnComplete;\n      }\n\n      var onDone = function onDone() {\n        if (callback) callback(_this2.state.timeDelta);\n        if (completedCallback) completedCallback(_this2.state.timeDelta);\n      };\n\n      return this.setState(function (prevState) {\n        var newStatus = status || prevState.status;\n\n        if (timeDelta.completed && !_this2.props.overtime) {\n          newStatus = \"COMPLETED\";\n        } else if (!status && newStatus === \"COMPLETED\") {\n          newStatus = \"STOPPED\";\n        }\n\n        return {\n          timeDelta: timeDelta,\n          status: newStatus\n        };\n      }, onDone);\n    }\n  }, {\n    key: \"getApi\",\n    value: function getApi() {\n      return this.api = this.api || {\n        start: this.start,\n        pause: this.pause,\n        stop: this.stop,\n        isStarted: this.isStarted,\n        isPaused: this.isPaused,\n        isStopped: this.isStopped,\n        isCompleted: this.isCompleted\n      };\n    }\n  }, {\n    key: \"getRenderProps\",\n    value: function getRenderProps() {\n      var _this$props2 = this.props,\n          daysInHours = _this$props2.daysInHours,\n          zeroPadTime = _this$props2.zeroPadTime,\n          zeroPadDays = _this$props2.zeroPadDays;\n      var timeDelta = this.state.timeDelta;\n      return Object.assign(Object.assign({}, timeDelta), {\n        api: this.getApi(),\n        props: this.props,\n        formatted: formatTimeDelta(timeDelta, {\n          daysInHours: daysInHours,\n          zeroPadTime: zeroPadTime,\n          zeroPadDays: zeroPadDays\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.legacyMode) {\n        var _this$props3 = this.props,\n            count = _this$props3.count,\n            _children = _this$props3.children,\n            onComplete = _this$props3.onComplete;\n        return createElement(Countdown, {\n          ref: this.legacyCountdownRef,\n          count: count,\n          onComplete: onComplete\n        }, _children);\n      }\n\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          overtime = _this$props4.overtime,\n          children = _this$props4.children,\n          renderer = _this$props4.renderer;\n      var renderProps = this.getRenderProps();\n\n      if (renderer) {\n        return renderer(renderProps);\n      }\n\n      if (children && this.state.timeDelta.completed && !overtime) {\n        return cloneElement(children, {\n          countdown: renderProps\n        });\n      }\n\n      var _renderProps$formatte = renderProps.formatted,\n          days = _renderProps$formatte.days,\n          hours = _renderProps$formatte.hours,\n          minutes = _renderProps$formatte.minutes,\n          seconds = _renderProps$formatte.seconds;\n      return createElement(\"span\", {\n        className: className\n      }, renderProps.total < 0 ? '-' : '', days, days ? ':' : '', hours, \":\", minutes, \":\", seconds);\n    }\n  }]);\n\n  return Countdown$1;\n}(Component);\nCountdown$1.defaultProps = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), {\n  controlled: false,\n  intervalDelay: 1000,\n  precision: 0,\n  autoStart: true\n});\nCountdown$1.propTypes = {\n  date: oneOfType([instanceOf(Date), string, number]),\n  daysInHours: bool,\n  zeroPadTime: number,\n  zeroPadDays: number,\n  controlled: bool,\n  intervalDelay: number,\n  precision: number,\n  autoStart: bool,\n  overtime: bool,\n  className: string,\n  children: element,\n  renderer: func,\n  now: func,\n  onMount: func,\n  onStart: func,\n  onPause: func,\n  onStop: func,\n  onTick: func,\n  onComplete: func\n};\n\nexport default Countdown$1;\nexport { calcTimeDelta, formatTimeDelta, zeroPad };\n","/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if only one character,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n"],"sourceRoot":""}