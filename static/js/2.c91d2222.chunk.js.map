{"version":3,"sources":["utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/callHelpers.ts","components/layout/Flex.tsx","utils/formatBalance.ts","utils/erc20.ts","components/UnlockButton.tsx","hooks/useStake.ts","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","components/Spacer/Spacer.tsx","hooks/useBlock.ts","hooks/useApprove.ts","components/ModalActions/ModalActions.tsx"],"names":["variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","useContext","TranslationsContext","length","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","restake","stakeReward","unstake","withdraw","harvest","getTreasuryNextAllocationTime","treasury","nextEpochPoint","call","nextEpochTimestamp","lastEpochTime","lastEpochTimestamp","nextAllocation","Date","multipliedBy","toNumber","prevAllocation","unstakeBoardroom","contract","stakeBoardroom","FlexLayout","styled","div","getBalanceNumber","balance","decimals","displayBalance","dividedBy","getFullDisplayBalance","toFixed","getContract","provider","Web3","eth","Contract","erc20","getAllowance","allowance","getTokenBalance","tokenAddress","userAddress","balanceOf","UnlockButton","props","TranslateString","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","useStake","contractPid","type","dispatch","useDispatch","useMasterchef","onStake","useCallback","fetchFarmUserDataAsync","useStakeToBoardroom","useBoardroom","useWithdrawFromBoardroom","onWithdraw","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","value","handleSelectMax","title","onSelectMax","onChange","symbol","variant","disabled","WithdrawModal","StyledInputWrapper","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","startAdornment","rest","StyledTokenInput","StyledSpacer","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","toLocaleString","size","placeholder","Spacer","s","ThemeContext","useBlock","BlockContext","useApproveBoardroom","share","useToken","QuoteToken","SSO","isApproved","setIsApproved","block","useEffect","then","x","isGreaterThan","useAllowance","onApprove","useApprove","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i"],"mappings":"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","file":"static/js/2.c91d2222.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { TreasuryAllocationTime } from 'utils'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) =>\r\n  lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({ from: account })\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const restake = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .stakeReward(pid)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const getTreasuryNextAllocationTime = async (treasury): Promise<TreasuryAllocationTime> => {\r\n  const nextEpochTimestamp = new BigNumber(await treasury.methods.nextEpochPoint().call())\r\n  const lastEpochTimestamp = new BigNumber(await treasury.methods.lastEpochTime().call())\r\n\r\n  const nextAllocation = new Date(nextEpochTimestamp.multipliedBy(1000).toNumber())\r\n  const prevAllocation = new Date(lastEpochTimestamp.multipliedBy(1000).toNumber())\r\n  \r\n  return { prevAllocation, nextAllocation }\r\n}\r\n\r\nexport const unstakeBoardroom = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const stakeBoardroom = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .stake(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getBalanceBig = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance\n}\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport function getBalance(balance: BigNumber, decimals = 18) : number {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\n}\n\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from 'uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { Farm } from 'state/types'\nimport { stake, restake, stakeBoardroom, unstakeBoardroom } from 'utils/callHelpers'\nimport { useBoardroom, useMasterchef } from './useContract'\nimport { fetchFarmUserDataAsync } from '../state/farms'\n\nexport const useStake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stake(masterChefContract, contractPid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n    },\n    [account, dispatch, masterChefContract, contractPid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useStakeToBoardroom = () => {\n  const { account } = useWallet()\n  const contract = useBoardroom()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stakeBoardroom(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useWithdrawFromBoardroom = () => {\n  const { account } = useWallet()\n  const contract = useBoardroom()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await unstakeBoardroom(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onWithdraw: handleStake }\n}\n\nexport const useReStake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(async () => {\n    const txHash = await restake(masterChefContract, contractPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    console.info(txHash)\n  }, [account, dispatch, masterChefContract, contractPid])\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Deposit ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          Cancel\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? 'Pending Confirmation' : 'Confirm'}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange?: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value?: string\n  min?: number | string\n  max?: number | string\n  type?: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, startAdornment, ...rest }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput onChange={onChange} {...rest} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from 'uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useDispatch } from 'react-redux'\nimport { FarmType, QuoteToken } from 'config/constants/types'\nimport { approve } from 'utils/callHelpers'\nimport BigNumber from 'bignumber.js'\nimport { getAllowance } from 'utils/erc20'\nimport { fetchFarmUserDataAsync } from '../state/farms'\nimport { useBoardroom, useMasterchef, useToken } from './useContract'\nimport useBlock from './useBlock'\n\nconst useApprove = (type: FarmType, lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useAllowance = (lpContract: Contract, contract: Contract) => {\n  const [isApproved, setIsApproved] = useState(false)\n  const { account }: { account: string } = useWallet()\n  const block = useBlock()\n\n  useEffect(() => {\n    if (isApproved) return\n    getAllowance(lpContract, contract, account).then((x) => {\n      if (!account) return\n      const allowance = new BigNumber(x)\n      setIsApproved(allowance && allowance.isGreaterThan(0))\n    })\n  }, [account, contract, lpContract, block, isApproved])\n\n  return isApproved\n}\n\nexport const useApproveBoardroom = () => {\n  const { account }: { account: string } = useWallet()\n  const contract = useBoardroom()\n  const share = useToken(QuoteToken.SSO)\n  const isApproved = useAllowance(share, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(share, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, share, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport  default useApprove","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n"],"sourceRoot":""}