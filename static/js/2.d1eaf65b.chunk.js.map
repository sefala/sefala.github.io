{"version":3,"sources":["components/Spacer/Spacer.tsx","hooks/useTokenBalance.ts","utils/formatBalance.ts","components/Value/Value.tsx","components/Label/Label.tsx","utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/erc20.ts","utils/callHelpers.ts","views/Farms/components/DepositModal.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useBlock.ts","hooks/useApprove.ts","components/ModalActions/ModalActions.tsx","hooks/useStake.ts","hooks/useExitBoardroom.ts"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","useTokenBalanceInAddress","token","address","useState","BigNumber","balance","setBalance","ethereum","useWallet","fastRefresh","useRefresh","useEffect","a","tokenAddress","getTokenAddress","getTokenBalance","res","fetchBalance","useTokenBalance","account","getDisplayBalance","decimals","fractionDigits","number","getBalance","toFixed","getBalanceNumber","displayBalance","dividedBy","pow","toNumber","getBalanceBig","getFullDisplayBalance","StyledValue","theme","colors","primary","Value","value","prefix","fontSize","start","updateStart","end","updateEnd","style","undefined","duration","separator","StyledLabel","isFinished","Label","text","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","TranslationsContext","length","getContract","provider","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","methods","allowance","options","call","userAddress","contract","balanceOf","approve","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","restake","stakeReward","unstake","withdraw","harvest","unstakeBoardroom","stakeBoardroom","swapDollar","DepositModal","max","onConfirm","onDismiss","tokenName","depositFeeBP","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","useCallback","e","currentTarget","handleSelectMax","title","onSelectMax","onChange","symbol","variant","onClick","disabled","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","startAdornment","rest","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","TranslateString","toLocaleString","placeholder","useBlock","BlockContext","useAllowance","isApproved","setIsApproved","block","then","x","isGreaterThan","useApproveBoardroom","type","useBoardroom","share","useToken","QuoteToken","SSO","onApprove","useApproveIfo","useIfo","SDO","useApproveTreasury","useTimelock","useApprove","dispatch","useDispatch","useMasterchef","fetchFarmUserDataAsync","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","map","child","i","useStake","contractPid","onStake","useStakeToBoardroom","useSwapIfo","onSwap","useWithdrawFromBoardroom","onWithdraw","oneUnit","useCashPriceInEstimatedTWAP","stat","setStat","useTreasury","slowRefresh","getDollarPrice","useBnbPriceTWAP","getBnbPrice","useTreasuryAllocationTimes","prevAllocation","Date","nextAllocation","nextEpochLength","time","setTime","getTreasury","calls","name","params","multicall","treasury","nextEpochPoint","lastEpochTimestamp","multipliedBy","fetchAllocations","useBondStats","setData","getBurnableDollarLeft","getRedeemableBonds","useExitBoardroom","onRedeem","exit","txHash"],"mappings":"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","file":"static/js/2.d1eaf65b.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { QuoteToken } from 'config/constants/types'\nimport { getTokenAddress } from 'utils/addressHelpers'\nimport { provider } from 'web3-core'\nimport { getTokenBalance } from 'utils/erc20'\nimport useRefresh from './useRefresh'\nimport { useToken } from './useContract'\n\nconst useTokenBalance = (token: QuoteToken) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n  const tokenAddress = getTokenAddress(token)\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTokenBalanceInAddress = (token: QuoteToken, address: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { ethereum }: { ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const tokenAddress = getTokenAddress(token)\n      const res = await getTokenBalance(ethereum, tokenAddress, address)\n      setBalance(new BigNumber(res))\n    }\n\n    if (address && ethereum) {\n      fetchBalance()\n    }\n  }, [address, ethereum, token, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = (token: QuoteToken) => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n  const contract = useToken(token)\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const supply = await contract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh, contract])\n\n  return totalSupply\n}\n\nexport default useTokenBalance\n","import BigNumber from 'bignumber.js'\n\nexport const getDisplayBalance = (balance: BigNumber, decimals = 18, fractionDigits = 3) => {\n  const number = getBalance(balance, decimals - fractionDigits);\n  return (number / 10 ** fractionDigits).toFixed(fractionDigits);\n};\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getBalanceBig = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance\n}\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport function getBalance(balance: BigNumber, decimals = 18) : number {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\n}\n\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react'\nimport CountUp from 'react-countup'\nimport styled from 'styled-components'\n\ninterface ValueProps {\n  value: string | number\n  decimals?: number\n  prefix?: string\n  fontSize?: string | number\n}\n\nconst Value: React.FC<ValueProps> = ({ value, decimals, prefix= '', fontSize = '30px' }) => {\n  const [start, updateStart] = useState(0)\n  const [end, updateEnd] = useState(0)\n\n  useEffect(() => {\n    if (typeof value === 'number') {\n      updateStart(end)\n      updateEnd(value)\n    }\n  }, [value])\n\n  return (\n    <StyledValue style={{ fontSize }}>\n      {typeof value === 'string' ? (\n        value\n      ) : (\n        <CountUp\n          start={start}\n          end={end}\n          decimals={\n            // eslint-disable-next-line no-nested-ternary\n            decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3\n          }\n          duration={1}\n          separator=\",\"\n          prefix={prefix}\n        />\n      )}\n    </StyledValue>\n  )\n}\n\nconst StyledValue = styled.div`\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 30px;\n  font-weight: 900;\n`\n\nexport default Value\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface LabelProps {\n  text?: string\n  isFinished?: boolean\n}\n\nconst Label: React.FC<LabelProps> = ({ text, isFinished = false }) => (\n  <StyledLabel isFinished={isFinished}>{text}</StyledLabel>\n)\n\nconst StyledLabel = styled.div<{ isFinished: boolean }>`\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'primary']};\n  font-size: 14px;\n`\n\nexport default Label\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) =>\r\n  lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({ from: account })\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const restake = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .stakeReward(pid)\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstakeBoardroom = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const stakeBoardroom = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .stake(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const swapDollar = async (contract, amount, account) => {\r\n  return contract.methods\r\n    .swapDollar(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Deposit ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          Cancel\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? 'Pending Confirmation' : 'Confirm'}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange?: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value?: string\n  min?: number | string\n  max?: number | string\n  type?: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, startAdornment, ...rest }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput onChange={onChange} {...rest} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from 'uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            Deposit Fee: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useDispatch } from 'react-redux'\nimport { FarmType, PegType, QuoteToken } from 'config/constants/types'\nimport { approve } from 'utils/callHelpers'\nimport BigNumber from 'bignumber.js'\nimport { getAllowance } from 'utils/erc20'\nimport { fetchFarmUserDataAsync } from '../state/farms'\nimport { useBoardroom, useIfo, useMasterchef, useTimelock, useToken } from './useContract'\nimport useBlock from './useBlock'\n\nconst useApprove = (type: FarmType, lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useAllowance = (lpContract: Contract, contract: Contract) => {\n  const [isApproved, setIsApproved] = useState(false)\n  const { account }: { account: string } = useWallet()\n  const block = useBlock()\n\n  useEffect(() => {\n    if (isApproved) return\n    getAllowance(lpContract, contract, account).then((x) => {\n      if (!account) return\n      const allowance = new BigNumber(x)\n      setIsApproved(allowance && allowance.isGreaterThan(0))\n    })\n  }, [account, contract, lpContract, block, isApproved])\n\n  return isApproved\n}\n\nexport const useApproveBoardroom = (type: PegType) => {\n  const { account }: { account: string } = useWallet()\n  const contract = useBoardroom(type)\n  const share = useToken(QuoteToken.SSO)\n  const isApproved = useAllowance(share, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(share, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, share, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport const useApproveIfo = () => {\n  const { account }: { account: string } = useWallet()\n  const contract = useIfo()\n  const tokenAddress = useToken(QuoteToken.SDO)\n  const isApproved = useAllowance(tokenAddress, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(tokenAddress, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenAddress, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport const useApproveTreasury = (token: QuoteToken) => {\n  const { account }: { account: string } = useWallet()\n  const contract = useTimelock()\n  const tokenAddress = useToken(token)\n  const isApproved = useAllowance(tokenAddress, contract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(tokenAddress, contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenAddress, contract])\n\n  return { onApprove: handleApprove, isApproved }\n}\n\nexport default useApprove\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { Farm } from 'state/types'\nimport { stake, restake, stakeBoardroom, unstakeBoardroom, swapDollar } from 'utils/callHelpers'\nimport { PegType } from 'config/constants/types'\nimport { useBoardroom, useIfo, useMasterchef } from './useContract'\nimport { fetchFarmUserDataAsync } from '../state/farms'\n\nexport const useStake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stake(masterChefContract, contractPid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n    },\n    [account, dispatch, masterChefContract, contractPid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useStakeToBoardroom = (type: PegType) => {\n  const { account } = useWallet()\n  const contract = useBoardroom(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stakeBoardroom(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSwapIfo = () => {\n  const { account } = useWallet()\n  const contract = useIfo()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await swapDollar(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onSwap: handleStake }\n}\n\nexport const useWithdrawFromBoardroom = (type: PegType) => {\n  const { account } = useWallet()\n  const contract = useBoardroom(type)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await unstakeBoardroom(contract, amount, account)\n    },\n    [account, contract],\n  )\n\n  return { onWithdraw: handleStake }\n}\n\nexport const useReStake = ({ contractPid, type }: Farm) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef(type)\n\n  const handleStake = useCallback(async () => {\n    const txHash = await restake(masterChefContract, contractPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    console.info(txHash)\n  }, [account, dispatch, masterChefContract, contractPid])\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback, useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { TreasuryAllocationTime } from 'utils'\r\nimport { getTreasury } from 'utils/addressHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport treasury from 'config/abi/treasury.json'\r\nimport BigNumber from 'bignumber.js'\r\nimport { PegType } from 'config/constants/types'\r\nimport { useBoardroom, useIfo, useTreasury } from './useContract'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useExitBoardroom = (type: PegType) => {\r\n  const { account } = useWallet()\r\n  const contract = useBoardroom(type)\r\n\r\n  const handleExit = useCallback(async () => {\r\n    const txHash = await contract.methods.exit().send({ from: account })\r\n    return txHash\r\n  }, [account, contract])\r\n\r\n  return { onRedeem: handleExit }\r\n}\r\n\r\nconst oneUnit = new BigNumber(10).pow(18)\r\n\r\nexport const useCashPriceInEstimatedTWAP = (type: PegType) => {\r\n  const [stat, setStat] = useState(new BigNumber(10).div(oneUnit))\r\n  const contract = useTreasury(type)\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    contract.methods\r\n      .getDollarPrice()\r\n      .call()\r\n      .then((x) => setStat(new BigNumber(x).div(oneUnit)))\r\n  }, [contract, slowRefresh])\r\n\r\n  return stat\r\n}\r\n\r\nexport const useBnbPriceTWAP = () => {\r\n  const [stat, setStat] = useState(new BigNumber(10).div(oneUnit))\r\n  const contract = useIfo()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    contract.methods\r\n      .getBnbPrice()\r\n      .call()\r\n      .then((x) => setStat(new BigNumber(x).div(oneUnit)))\r\n  }, [contract, slowRefresh])\r\n\r\n  return stat\r\n}\r\n\r\nexport const useTreasuryAllocationTimes = (type: PegType) => {\r\n  const [time, setTime] = useState<TreasuryAllocationTime>({\r\n    prevAllocation: new Date(),\r\n    nextAllocation: new Date(),\r\n    nextEpochLength: 0,\r\n  })\r\n  const contract = getTreasury(type)\r\n\r\n  useEffect(() => {\r\n    const fetchAllocations = async () => {\r\n      const calls = [\r\n        {\r\n          address: contract,\r\n          name: 'nextEpochPoint',\r\n          params: [],\r\n        },\r\n        {\r\n          address: contract,\r\n          name: 'lastEpochTime',\r\n          params: [],\r\n        },\r\n        {\r\n          address: contract,\r\n          name: 'nextEpochLength',\r\n          params: [],\r\n        },\r\n      ]\r\n\r\n      const [nextEpochPoint, lastEpochTimestamp, nextEpochLength] = await multicall((treasury as unknown) as any, calls)\r\n      setTime({\r\n        nextAllocation: new Date(new BigNumber(nextEpochPoint).multipliedBy(1000).toNumber()),\r\n        prevAllocation: new Date(new BigNumber(lastEpochTimestamp).multipliedBy(1000).toNumber()),\r\n        nextEpochLength: new BigNumber(nextEpochLength).toNumber(),\r\n      })\r\n    }\r\n\r\n    if (contract) fetchAllocations()\r\n  }, [contract])\r\n  return time\r\n}\r\n\r\nexport const useBondStats = (type: PegType) => {\r\n  const [data, setData] = useState([new BigNumber(0), new BigNumber(0)])\r\n  const contract = getTreasury(type)\r\n\r\n  useEffect(() => {\r\n    const fetchAllocations = async () => {\r\n      const calls = [\r\n        {\r\n          address: contract,\r\n          name: 'getBurnableDollarLeft',\r\n          params: [],\r\n        },\r\n        {\r\n          address: contract,\r\n          name: 'getRedeemableBonds',\r\n          params: [],\r\n        },\r\n      ]\r\n\r\n      const [getBurnableDollarLeft, getRedeemableBonds] = await multicall((treasury as unknown) as any, calls)\r\n      setData([new BigNumber(getBurnableDollarLeft).div(oneUnit), new BigNumber(getRedeemableBonds).div(oneUnit)])\r\n    }\r\n\r\n    if (contract) fetchAllocations()\r\n  }, [contract])\r\n  return data\r\n}\r\n\r\nexport default useExitBoardroom\r\n"],"sourceRoot":""}